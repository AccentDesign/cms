// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package dbx

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChangeFrequency string

const (
	ChangeFrequencyNever   ChangeFrequency = "never"
	ChangeFrequencyYearly  ChangeFrequency = "yearly"
	ChangeFrequencyMonthly ChangeFrequency = "monthly"
	ChangeFrequencyWeekly  ChangeFrequency = "weekly"
	ChangeFrequencyDaily   ChangeFrequency = "daily"
	ChangeFrequencyHourly  ChangeFrequency = "hourly"
	ChangeFrequencyAlways  ChangeFrequency = "always"
)

func (e *ChangeFrequency) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChangeFrequency(s)
	case string:
		*e = ChangeFrequency(s)
	default:
		return fmt.Errorf("unsupported scan type for ChangeFrequency: %T", src)
	}
	return nil
}

type NullChangeFrequency struct {
	ChangeFrequency ChangeFrequency
	Valid           bool // Valid is true if ChangeFrequency is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChangeFrequency) Scan(value interface{}) error {
	if value == nil {
		ns.ChangeFrequency, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChangeFrequency.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChangeFrequency) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChangeFrequency), nil
}

type PageType string

const (
	PageTypeGeneral PageType = "general"
	PageTypeListing PageType = "listing"
	PageTypeSearch  PageType = "search"
)

func (e *PageType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PageType(s)
	case string:
		*e = PageType(s)
	default:
		return fmt.Errorf("unsupported scan type for PageType: %T", src)
	}
	return nil
}

type NullPageType struct {
	PageType PageType
	Valid    bool // Valid is true if PageType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPageType) Scan(value interface{}) error {
	if value == nil {
		ns.PageType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PageType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPageType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PageType), nil
}

type Page struct {
	ID                   int32
	Path                 string
	Level                pgtype.Int4
	Url                  pgtype.Text
	PageType             PageType
	Title                string
	Tags                 []string
	Categories           []string
	FeaturedImage        string
	IsInSitemap          bool
	IsSearchable         bool
	SearchVector         string
	FullText             string
	NoCache              bool
	Priority             pgtype.Numeric
	ChangeFrequency      ChangeFrequency
	CreatedAt            pgtype.Timestamp
	UpdatedAt            pgtype.Timestamp
	PublishedAt          pgtype.Timestamp
	MetaDescription      pgtype.Text
	MetaOgSiteName       pgtype.Text
	MetaOgTitle          pgtype.Text
	MetaOgDescription    pgtype.Text
	MetaOgUrl            pgtype.Text
	MetaOgType           pgtype.Text
	MetaOgImage          pgtype.Text
	MetaOgImageSecureUrl pgtype.Text
	MetaOgImageWidth     pgtype.Text
	MetaOgImageHeight    pgtype.Text
	MetaArticlePublisher pgtype.Text
	MetaArticleSection   pgtype.Text
	MetaArticleTag       pgtype.Text
	MetaTwitterCard      pgtype.Text
	MetaTwitterImage     pgtype.Text
	MetaTwitterSite      pgtype.Text
	MetaRobots           pgtype.Text
}

type PageHtml struct {
	ID                   int32
	Path                 string
	Level                pgtype.Int4
	Url                  pgtype.Text
	PageType             PageType
	Title                string
	Tags                 []string
	Categories           []string
	FeaturedImage        string
	IsInSitemap          bool
	IsSearchable         bool
	SearchVector         string
	FullText             string
	NoCache              bool
	Priority             pgtype.Numeric
	ChangeFrequency      ChangeFrequency
	CreatedAt            pgtype.Timestamp
	UpdatedAt            pgtype.Timestamp
	PublishedAt          pgtype.Timestamp
	MetaDescription      pgtype.Text
	MetaOgSiteName       pgtype.Text
	MetaOgTitle          pgtype.Text
	MetaOgDescription    pgtype.Text
	MetaOgUrl            pgtype.Text
	MetaOgType           pgtype.Text
	MetaOgImage          pgtype.Text
	MetaOgImageSecureUrl pgtype.Text
	MetaOgImageWidth     pgtype.Text
	MetaOgImageHeight    pgtype.Text
	MetaArticlePublisher pgtype.Text
	MetaArticleSection   pgtype.Text
	MetaArticleTag       pgtype.Text
	MetaTwitterCard      pgtype.Text
	MetaTwitterImage     pgtype.Text
	MetaTwitterSite      pgtype.Text
	MetaRobots           pgtype.Text
	Html                 string
}

type Setting struct {
	ID                   int32
	SiteRootUrl          string
	MetaDescription      pgtype.Text
	MetaOgSiteName       pgtype.Text
	MetaOgTitle          pgtype.Text
	MetaOgDescription    pgtype.Text
	MetaOgUrl            pgtype.Text
	MetaOgType           pgtype.Text
	MetaOgImage          pgtype.Text
	MetaOgImageSecureUrl pgtype.Text
	MetaOgImageWidth     pgtype.Text
	MetaOgImageHeight    pgtype.Text
	MetaArticlePublisher pgtype.Text
	MetaArticleSection   pgtype.Text
	MetaArticleTag       pgtype.Text
	MetaTwitterCard      pgtype.Text
	MetaTwitterImage     pgtype.Text
	MetaTwitterSite      pgtype.Text
	MetaRobots           pgtype.Text
	CreatedAt            pgtype.Timestamp
	UpdatedAt            pgtype.Timestamp
}
